#lang racket

;; Excercise 1.9:
;; Each of the following two procedures defines a method for adding
;; two positive integers in terms of the procedures inc, which increments
;; its argument by 1, and dec, which decrements its argument by 1.

(define (add1 a b)
    (if (= a 0) 
    b
    (+ 1 (add1 (- a 1) b))))
;; iterative

(define (add2 a b)
  (if (= a 0)
      b
      (add2 (- a 1) (+ b 1))))
;; recursive

;; Using the substitution model, illustrate the process generated by each
;; procedure in evaluating (+ 4 5). Are these processes iterative or recursive?


;; Excercise 1.10:
;; The following procedure computes a mathematical function called Ackermann's function.
(define A (lambda (x y)
            (cond [(= y 0) 0]
                  [(= x 0) (* 2 y)]
                  [(= y 1) 2]
                  [else (A (- x 1) (A x (- y 1)))])))

;; What are the values of the following expression?
(A 1 10) ;; (A 0 (A 1 9)) => (A 0 (A 0 (A 1 8) => ... => (A 0 (A 0 ... (A 0 (A 1 1))))))) => 2^10 = 1024
(A 2 3)  ;; (A 1 (A 2 3)) => (A 1 (A 1 (A 2 2))) => (A 1 (A 1 (A 1 (A 2 1)))) => (A 1 (A 1 (A 1 2)))
         ;; (A 1 (A 1 (A 0 (A 1 1)))) => (A 1 (A 1 (A 0 2))) => (A 1 (A 1 4)) ... => (A 1 (A 0 (A 1 3))
         ;;  ...=> 2^(2^4) = 65536
(A 3 3)  ;; => (A 1 16) => 65536

;; Consider the following procedures, where A is the procedure defined above:
(define (f n) (A 0 n)) ;; => f(x) = 2*x
(define (g n) (A 1 n)) ;; => g(x) = 2^x
(define (h n) (A 2 n)) ;; => h(x) = 2^(h(n-1))
(define (k n) (* 5 n n))

;; Give concise mathematical definitions for the functions computed by the procedures f, g and h for positive
;; integer values of n.
;; For example, (k n) computes 5n^2

